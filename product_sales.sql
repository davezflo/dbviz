-- The following was generated by GPT-4

-- Begin Structure --

-- Table for storing product information
CREATE TABLE Products (
    ProductId INTEGER PRIMARY KEY,
    SKU TEXT NOT NULL,
    Description TEXT,
    Price DECIMAL(10, 2)
);

-- Table for storing region information
CREATE TABLE Regions (
    RegionId INTEGER PRIMARY KEY,
    RegionName TEXT NOT NULL
);

-- Table for storing sales information
CREATE TABLE Sales (
    SaleId INTEGER PRIMARY KEY,
    ProductId INTEGER NOT NULL,
    RegionId INTEGER NOT NULL,
    Quarter INTEGER NOT NULL,
    Year INTEGER NOT NULL,
    QuantitySold INTEGER NOT NULL,
    TotalSaleAmount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (ProductId) REFERENCES Products(ProductId),
    FOREIGN KEY (RegionId) REFERENCES Regions(RegionId)
);

-- End Structure --

-- Begin Examples --
SELECT SUM(TotalSaleAmount) AS total_sales FROM Sales WHERE Quarter = 3 AND Year = 2021;
select SUM(TotalSaleAmount) from Sales where Quarter = 3 and Year=2008 AND ProductId in (select productId from Products where Description='Magical Princess Castle');
select Regions.RegionName, Sum(TotalSaleAmount) from Sales inner join regions on Regions.RegionId = Sales.RegionId where Quarter = 3 and Year=2008 AND ProductId in (select productId from Products where Description='Magical Princess Castle') group by sales.regionid;
select sum(totalsaleamount), Products.Description, year from sales inner join Products on Sales.ProductId = Products.ProductId where regionid = 1 and Products.SKU='TOY1006' group by Products.Description, year;
select sum(QuantitySold), year from sales where productid in (select productId from Products where SKU='TOY1006');
select sum(quantitysold), year from sales inner join regions on sales.RegionId = regions.RegionId inner join products on sales.ProductId = products.ProductId where products.sku='TOY1004' and year >= 2002 and year <= 2018 and regions.RegionName LIKE '%northwest%' group by year;
-- End Examples -- 

-- Begin Inserts --

INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (1, 'TOY1001', 'Space Ranger Action Figure', 9.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (2, 'TOY1002', 'Ocean Explorer Submarine', 12.30);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (3, 'TOY1003', 'Magical Princess Castle', 15.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (4, 'TOY1004', 'Dinosaur Adventure Playset', 20.00);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (5, 'TOY1005', 'Miniature Train Set', 35.00);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (6, 'TOY1006', 'Robot Builder Kit', 27.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (7, 'TOY1007', 'Jungle Animal Puzzle', 8.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (8, 'TOY1008', 'Superhero Cape and Mask', 5.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (9, 'TOY1009', 'Interactive Learning Tablet', 42.80);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (10, 'TOY1010', 'Rainbow Building Blocks', 11.25);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (11, 'TOY1011', 'Pirate Ship Adventure', 18.75);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (12, 'TOY1012', 'Teddy Bear Plush', 10.00);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (13, 'TOY1013', 'Firefighter Play Kit', 22.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (14, 'TOY1014', 'Cuddly Kitten Plush', 6.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (15, 'TOY1015', 'Mystical Unicorn Figurine', 14.20);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (16, 'TOY1016', 'Mermaid Doll', 7.95);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (17, 'TOY1017', 'Remote Control Race Car', 30.00);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (18, 'TOY1018', 'Little Chef Cooking Set', 16.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (19, 'TOY1019', 'Glow-in-the-Dark Stars', 3.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (20, 'TOY1020', 'Treasure Hunt Board Game', 9.25);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (21, 'TOY1021', 'Fairy Garden Kit', 21.80);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (22, 'TOY1022', 'Wild West Cowboys', 13.00);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (23, 'TOY1023', 'Magic Trick Set', 11.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (24, 'TOY1024', 'Doctor Role Play Set', 24.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (25, 'TOY1025', 'Butterfly Net and Kit', 4.99);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (26, 'TOY1026', 'Giant Bubble Maker', 2.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (27, 'TOY1027', 'Knights and Dragons Set', 19.95);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (28, 'TOY1028', 'Electronic Keyboard for Kids', 31.50);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (29, 'TOY1029', 'Junior Detective Kit', 8.75);
INSERT INTO Products (ProductId, SKU, Description, Price) VALUES (30, 'TOY1030', 'Solar System Mobile Kit', 17.00);

INSERT INTO Regions (RegionId, RegionName) VALUES (1, 'Northeast');
INSERT INTO Regions (RegionId, RegionName) VALUES (2, 'Southeast');
INSERT INTO Regions (RegionId, RegionName) VALUES (3, 'Midwest');
INSERT INTO Regions (RegionId, RegionName) VALUES (4, 'Southwest');
INSERT INTO Regions (RegionId, RegionName) VALUES (5, 'Northwest');
INSERT INTO Regions (RegionId, RegionName) VALUES (6, 'West');

-- End Inserts --

-- Begin Custom Python Code --

#Generated by ChatGPT
import sqlite3
import psycopg2
import random

class SalesDataGenerator:
    def __init__(self):
        # Set mean and standard deviation for sales calculations
        self.mean_sales = 1750000  # Mean sales in dollars
        self.std_dev_sales = 600000  # Standard deviation in dollars

    def get_quantity_sold(self, region, year, quarter):
        # Adjust mean based on region and year (simplified example)
        adjusted_mean = self.mean_sales
        if region == 'Southwest':
            adjusted_mean *= 0.8
        elif region == 'Midwest':
            if 2012 <= year <= 2015:
                adjusted_mean *= 0.9
            else:
                adjusted_mean *= 1.1

        # Generate random sales amount
        sales_amount = random.normalvariate(adjusted_mean, self.std_dev_sales)
        return sales_amount

    def populate(self, conn):
        cursor = conn.cursor()
        query_format = "INSERT INTO Sales (SaleId, ProductId, RegionId, Quarter, Year, QuantitySold, TotalSaleAmount) VALUES (?, ?, ?, ?, ?, ?, ?)"
        select_format = "SELECT Price FROM Products WHERE ProductId = ?"
        if isinstance(conn, psycopg2.extensions.connection):
            query_format = "INSERT INTO Sales (SaleId, ProductId, RegionId, Quarter, Year, QuantitySold, TotalSaleAmount) VALUES (%s, %s, %s, %s, %s, %s, %s)"
            select_format = "SELECT Price FROM Products WHERE ProductId = %s"

        print("Generating fake sales figures...")
        sales_id = 1
        for year in range(2002, 2022):
            for quarter in range(1, 5):
                for region_id in range(1, 7):  # Assuming 6 regions
                    for product_id in range(1, 31):  # Assuming 30 products
                        # Fetch product price
                        cursor.execute(select_format, (product_id,))
                        price = float(cursor.fetchone()[0])
                      
                        # Calculate quantity sold
                        region_name = ['Northeast', 'Southeast', 'Midwest', 'Southwest', 'Northwest', 'West'][region_id - 1]
                        total_sales = self.get_quantity_sold(region_name, year, quarter)
                        quantity_sold = int(total_sales / price)
                        
                        # Insert into Sales table
                        cursor.execute(query_format,
                                       (sales_id, product_id, region_id, quarter, year, quantity_sold, total_sales))
                        sales_id = sales_id + 1

        # Commit changes
        conn.commit()
        print("Done generating sales figures.")

sdg = SalesDataGenerator()
sdg.populate(__db__connection__)

-- End Custom Python Code --
